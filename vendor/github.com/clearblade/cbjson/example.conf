//
//  This bus configuration file is in json format with the additional niceness of allowing
//  for comments. Duh.
//
//  Enjoy/Ignore
//

{
    "ScoringFunction": "IBeDaScorer",

    //
    //  Nodes is a mapping from logical name to ip address. ip addresses should ONLY
    //  appear here. We should have a command line method for ingesting ip addresses.
    //  Hardwiring them here sucks.
    //  Something like -nodes='NodeA:<ipaddr>,NodeB:<ipaddr>,NodeC:<ipaddr>,NodeD:<ipaddr>,NodeE:<ipaddr>'
    //  Then, we could ignore the "Nodes" below and use just what was passed in on the
    //  command line. Food for thought. It's pretty much what etcd does FYI
    //  Note: I'm calling these nodes and not hosts because we might be using docker containers, etc.
    //
    "Nodes": {
        "NodeA": "1.2.3.4",
        "NodeB": "2.3.4.5",
        "NodeC": "3.4.5.6",
        "NodeD": "10.4.5.6",
        "NodeE": "11.4.5.6"
    },

    //
    //  Groups are useful for logically naming a set of nodes that are intended to perform
    //  a specific function within the cluster. 
    //
    //  There are two predefined groups: "AllNodes" and "LocalNode". AllNodes denotes all
    //  the nodes listed above in "Nodes". "LocalNode" denotes the node on which the bus
    //  scoring is currently occuring.
    //
    //  (The stuff below is just an example. Not intended to make any sense.)
    //
    "Groups": {
        "DatabaseNode": ["NodeA"],
        "LoggingNode": ["NodeB"],
        "RunServiceNodes": ["NodeB", "NodeC", "NodeD"],
        "AnalyticsNodes": ["NodeD", "NodeE"],
        "ReportingNodes": ["NodeC"]
    },

    //
    //  Rules is used to define how/where bus functions are handled within the cluster.
    //  It is an array of rules. Each rule is an array that maps a function specification
    //  to a group of cluster nodes. Bus functions are specified as <moduleName>/<functionName>.
    //
    //  The intention is that these rules are evaluated for each bus function AT FUNCTION
    //  REGISTRATION TIME, not during runtime when they're actually being called. Evaluation
    //  is indended to work as follows (roughly)
    //  
    //  For each bus function being evaluated:
    //      In the order the rules appear below, evaluate the function with the func spec
    //          If there is a match
    //              apply the Node Group to the function
    //              continue
    //      There's no match if we're here -- apply AllNodes to the function
    //
    //  The thought is that these /* */ rules probably won't change very often. If they do,
    //  we should provide a "reapply rules endpoint" to all nodes
    //
    //  During runtime, when a bus function is being called, the scoring function
    //  uses the members of the associated Node Group in the scoring process.
    //
    //  As always, if there are no winners or all the other nodes are unreachable in the group,
    //  we should run the function using the CURRENT method -- just score all available
    //  potentials and run with the best score. So, in reality, this config is merely a
    //  set of rules that apply when pretty much all is going well. When a partition occurs
    //  or one or more nodes go down, we just do the best we can.
    //

    /* Does this style *S*t of comment work ////////////**/
    "Rules": [
        ["*/Init*", /* And another useless comment */ "LocalNode"],
        ["CoreCode/InvokeCodeService", "RunServiceNodes"],
        ["CoreLogger/*", "LoggingNodes"],
        ["Reporter/*", "ReportingNodes"]
    ]
}
